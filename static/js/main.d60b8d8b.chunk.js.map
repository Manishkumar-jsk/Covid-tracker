{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/Country.jsx","App.js","index.js"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyDate","map","dailyData","total","date","reportDate","fetchCountries","countries","name","CovidChart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","red","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","Country","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d60b8d8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__27R83\",\"card\":\"Cards_card__1MTzF\",\"infected\":\"Cards_infected__3WRan\",\"recovered\":\"Cards_recovered__2tE22\",\"deaths\":\"Cards_deaths__xKebc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2iL2p\",\"image\":\"App_image__WuzEr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__28aA0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2rIkv\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths,lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'Loading....'\r\n    }\r\n    return (\r\n      <div className={styles.container}>\r\n          <Grid container spacing={3} justify=\"center\">\r\n             <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                 <CardContent>\r\n                      <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                      <Typography variant=\"h5\">\r\n                          <CountUp\r\n                          start={0}\r\n                          end={confirmed.value}\r\n                          duration={2.5}\r\n                          separator=\",\"\r\n                          />\r\n                      </Typography>\r\n                      <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                      <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                  </CardContent>\r\n              </Grid>\r\n              <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                 <CardContent>\r\n                      <Typography color=\"textSecondary\" gutterBottom>Recovery</Typography>\r\n                      <Typography variant=\"h5\">\r\n                          <CountUp\r\n                          start={0}\r\n                          end={recovered.value}\r\n                          duration={2.5}\r\n                          separator=\",\"\r\n                          />\r\n                      </Typography>\r\n                      <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                      <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                  </CardContent>\r\n              </Grid>\r\n              <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                 <CardContent>\r\n                      <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                      <Typography variant=\"h5\">\r\n                          <CountUp \r\n                          start={0}\r\n                          end={deaths.value}\r\n                          duration={2.5}\r\n                          separator={\",\"}\r\n                          />\r\n                      </Typography>\r\n                      <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                      <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                  </CardContent>\r\n              </Grid>\r\n          </Grid>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const {data : {confirmed,recovered,deaths,lastUpdate,}} = await axios.get(changeableUrl);\r\n\r\n        const modifiedData = {confirmed,recovered,deaths,lastUpdate,}\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDailyDate = async() => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`)\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const {data:{countries}} = await axios.get(`${url}/countries`)\r\n        \r\n        return countries.map((country) => country.name);\r\n        \r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\n","import React,{useEffect} from 'react';\r\nimport { useState } from 'react';\r\nimport { fetchDailyDate } from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { Chart as ChartJS } from 'chart.js/auto';\r\nimport { Chart }            from 'react-chartjs-2';\r\nimport styles from './Chart.module.css'\r\n\r\nconst CovidChart = ({data,country}) => {\r\n    const [dailyData,setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async() => {\r\n            setDailyData(await fetchDailyDate())\r\n        }\r\n\r\n        fetchApi();\r\n    },[]);\r\n\r\nconst lineChart = (\r\n    dailyData.length !== 0\r\n    ? (\r\n        <Line\r\n        data={{\r\n            labels:dailyData.map(({date}) => date),\r\n            datasets:[{\r\n                data:dailyData.map(({confirmed}) => confirmed),\r\n                label:'Infected',\r\n                borderColor:'#3333ff',\r\n                fill:true,\r\n            },{\r\n                data:dailyData.map(({deaths}) => deaths),\r\n                label:'Deaths',\r\n                borderColor:red,\r\n                backgroundColor:'rgba(255,0,0,0.5)',\r\n                fill:true,\r\n            }],\r\n        }}\r\n        />\r\n    ):null\r\n);\r\n\r\nconst barChart = (\r\n    data.confirmed\r\n    ? (\r\n        <Bar\r\n        data = {{\r\n            labels:['Infected','Recovered','Deaths'],\r\n            datasets:[{\r\n                label:'People',\r\n                backgroundColor:[\r\n                    'rgba(0,0,255,0.5)',\r\n                    'rgba(0,255,0,0.5)',\r\n                    'rgba(255,0,0,0.5)',\r\n                ],\r\n                data:[data.confirmed.value,data.recovered.value,data.deaths.value]\r\n            }]\r\n        }}\r\n        options={{\r\n            legend: {display:false},\r\n            title:{display:true,text:'Current state in ${country'},\r\n        }}\r\n         />\r\n    ):null\r\n)\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n           {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CovidChart","import React, {useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setfetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setfetchedCountries( await fetchCountries())\r\n        }\r\n        fetchApi();\r\n    },[setfetchedCountries]);\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\nimport './App.css';\nimport Cards from './components/Cards/Cards';\nimport CovidChart from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/Country';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/covid.png'\n\n\nclass App extends React.Component{\n  state = {\n    data:{},\n    country:'', \n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n\n    this.setState({data:fetchedData})\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({data:fetchedData,country:country});\n\n  }\n\n  render() {\n    const {data,country} = this.state;\n  return (\n    <div className={styles.container}>\n      <img className={styles.image} src={coronaImage} alt=\"coronaImage\" />\n      <Cards data={data} />\n      <CountryPicker handleCountryChange={this.handleCountryChange} />\n      <CovidChart data={data} country={country}/>\n    </div>\n  );\n }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}